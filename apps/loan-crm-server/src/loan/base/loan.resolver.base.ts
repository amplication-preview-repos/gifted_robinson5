/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Loan } from "./Loan";
import { LoanCountArgs } from "./LoanCountArgs";
import { LoanFindManyArgs } from "./LoanFindManyArgs";
import { LoanFindUniqueArgs } from "./LoanFindUniqueArgs";
import { CreateLoanArgs } from "./CreateLoanArgs";
import { UpdateLoanArgs } from "./UpdateLoanArgs";
import { DeleteLoanArgs } from "./DeleteLoanArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { Application } from "../../application/base/Application";
import { Client } from "../../client/base/Client";
import { LoanService } from "../loan.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Loan)
export class LoanResolverBase {
  constructor(
    protected readonly service: LoanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "read",
    possession: "any",
  })
  async _loansMeta(
    @graphql.Args() args: LoanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Loan])
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "read",
    possession: "any",
  })
  async loans(@graphql.Args() args: LoanFindManyArgs): Promise<Loan[]> {
    return this.service.loans(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Loan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "read",
    possession: "own",
  })
  async loan(@graphql.Args() args: LoanFindUniqueArgs): Promise<Loan | null> {
    const result = await this.service.loan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Loan)
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "create",
    possession: "any",
  })
  async createLoan(@graphql.Args() args: CreateLoanArgs): Promise<Loan> {
    return await this.service.createLoan({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Loan)
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "update",
    possession: "any",
  })
  async updateLoan(@graphql.Args() args: UpdateLoanArgs): Promise<Loan | null> {
    try {
      return await this.service.updateLoan({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Loan)
  @nestAccessControl.UseRoles({
    resource: "Loan",
    action: "delete",
    possession: "any",
  })
  async deleteLoan(@graphql.Args() args: DeleteLoanArgs): Promise<Loan | null> {
    try {
      return await this.service.deleteLoan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: Loan,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: Loan
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: Loan): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
