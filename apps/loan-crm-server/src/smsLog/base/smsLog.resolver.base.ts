/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SmsLog } from "./SmsLog";
import { SmsLogCountArgs } from "./SmsLogCountArgs";
import { SmsLogFindManyArgs } from "./SmsLogFindManyArgs";
import { SmsLogFindUniqueArgs } from "./SmsLogFindUniqueArgs";
import { CreateSmsLogArgs } from "./CreateSmsLogArgs";
import { UpdateSmsLogArgs } from "./UpdateSmsLogArgs";
import { DeleteSmsLogArgs } from "./DeleteSmsLogArgs";
import { SmsLogService } from "../smsLog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SmsLog)
export class SmsLogResolverBase {
  constructor(
    protected readonly service: SmsLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "read",
    possession: "any",
  })
  async _smsLogsMeta(
    @graphql.Args() args: SmsLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SmsLog])
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "read",
    possession: "any",
  })
  async smsLogs(@graphql.Args() args: SmsLogFindManyArgs): Promise<SmsLog[]> {
    return this.service.smsLogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SmsLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "read",
    possession: "own",
  })
  async smsLog(
    @graphql.Args() args: SmsLogFindUniqueArgs
  ): Promise<SmsLog | null> {
    const result = await this.service.smsLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmsLog)
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "create",
    possession: "any",
  })
  async createSmsLog(@graphql.Args() args: CreateSmsLogArgs): Promise<SmsLog> {
    return await this.service.createSmsLog({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SmsLog)
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "update",
    possession: "any",
  })
  async updateSmsLog(
    @graphql.Args() args: UpdateSmsLogArgs
  ): Promise<SmsLog | null> {
    try {
      return await this.service.updateSmsLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SmsLog)
  @nestAccessControl.UseRoles({
    resource: "SmsLog",
    action: "delete",
    possession: "any",
  })
  async deleteSmsLog(
    @graphql.Args() args: DeleteSmsLogArgs
  ): Promise<SmsLog | null> {
    try {
      return await this.service.deleteSmsLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
